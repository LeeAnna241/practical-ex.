using System;
using System.Collections.Generic;
using System.IO;
class Program
{
    class Edge
    {
        public int To;
        public int Weight;
        public Edge(int to, int weight)
        {
            To = to;
            Weight = weight;
        }
    }

    static void Main()
    {
        var lines = File.ReadAllLines("D:\\Users\\User\\Desktop\\лабораторные работы\\РГР\\input_1.txt");
        var firstLine = lines[0].Split();
        int n = int.Parse(firstLine[0]);
        int m = int.Parse(firstLine[1]);

        var graph = new List<Edge>[n + 1];
        for (int i = 0; i <= n; i++)
            graph[i] = new List<Edge>();

        for (int i = 1; i <= m; i++)
        {
            var parts = lines[i].Split();
            int u = int.Parse(parts[0]);
            int v = int.Parse(parts[1]);
            int w = int.Parse(parts[2]);

            graph[u].Add(new Edge(v, w));
            graph[v].Add(new Edge(u, w)); 
        }

        int start = 1;
        int target = 3;

        int[] dist = new int[n + 1];
        bool[] visited = new bool[n + 1];
        Array.Fill(dist, int.MaxValue);
        dist[start] = 0;

        var pq = new PriorityQueue<int, int>();
        pq.Enqueue(start, 0);

        while (pq.Count > 0)
        {
            pq.TryDequeue(out int u, out int d);
            if (visited[u]) continue;
            visited[u] = true;

            foreach (var edge in graph[u])
            {
                int v = edge.To;
                int newDist = dist[u] + edge.Weight;
                if (newDist < dist[v])
                {
                    dist[v] = newDist;
                    pq.Enqueue(v, newDist);
                }
            }
        }

        File.WriteAllText("D:\\Users\\User\\Desktop\\лабораторные работы\\РГР\\output_1.txt", dist[target].ToString());
    }
}
